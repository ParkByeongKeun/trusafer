// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: main_control.proto

package maincontrol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MainControlClient is the client API for MainControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MainControlClient interface {
	// Registerer
	CreateRegisterer(ctx context.Context, in *CreateRegistererRequest, opts ...grpc.CallOption) (*CreateRegistererResponse, error)
	ReadRegisterer(ctx context.Context, in *ReadRegistererRequest, opts ...grpc.CallOption) (*ReadRegistererResponse, error)
	ReadRegistererList(ctx context.Context, in *ReadRegistererListRequest, opts ...grpc.CallOption) (*ReadRegistererListResponse, error)
	UpdateRegisterer(ctx context.Context, in *UpdateRegistererRequest, opts ...grpc.CallOption) (*UpdateRegistererResponse, error)
	DeleteRegisterer(ctx context.Context, in *DeleteRegistererRequest, opts ...grpc.CallOption) (*DeleteRegistererResponse, error)
	// Place
	CreatePlace(ctx context.Context, in *CreatePlaceRequest, opts ...grpc.CallOption) (*CreatePlaceResponse, error)
	ReadPlace(ctx context.Context, in *ReadPlaceRequest, opts ...grpc.CallOption) (*ReadPlaceResponse, error)
	ReadPlaceList(ctx context.Context, in *ReadPlaceListRequest, opts ...grpc.CallOption) (*ReadPlaceListResponse, error)
	UpdatePlace(ctx context.Context, in *UpdatePlaceRequest, opts ...grpc.CallOption) (*UpdatePlaceResponse, error)
	DeletePlace(ctx context.Context, in *DeletePlaceRequest, opts ...grpc.CallOption) (*DeletePlaceResponse, error)
	// Settop
	CreateSettop(ctx context.Context, in *CreateSettopRequest, opts ...grpc.CallOption) (*CreateSettopResponse, error)
	ReadSettop(ctx context.Context, in *ReadSettopRequest, opts ...grpc.CallOption) (*ReadSettopResponse, error)
	ReadSettopList(ctx context.Context, in *ReadSettopListRequest, opts ...grpc.CallOption) (*ReadSettopListResponse, error)
	UpdateSettop(ctx context.Context, in *UpdateSettopRequest, opts ...grpc.CallOption) (*UpdateSettopResponse, error)
	DeleteSettop(ctx context.Context, in *DeleteSettopRequest, opts ...grpc.CallOption) (*DeleteSettopResponse, error)
	// Sensor
	CreateSensor(ctx context.Context, in *CreateSensorRequest, opts ...grpc.CallOption) (*CreateSensorResponse, error)
	ReadSensor(ctx context.Context, in *ReadSensorRequest, opts ...grpc.CallOption) (*ReadSensorResponse, error)
	ReadSensorList(ctx context.Context, in *ReadSensorListRequest, opts ...grpc.CallOption) (*ReadSensorListResponse, error)
	UpdateSensor(ctx context.Context, in *UpdateSensorRequest, opts ...grpc.CallOption) (*UpdateSensorResponse, error)
	DeleteSensor(ctx context.Context, in *DeleteSensorRequest, opts ...grpc.CallOption) (*DeleteSensorResponse, error)
	// History
	CreateHistory(ctx context.Context, in *CreateHistoryRequest, opts ...grpc.CallOption) (*CreateHistoryResponse, error)
	ReadHistory(ctx context.Context, in *ReadHistoryRequest, opts ...grpc.CallOption) (*ReadHistoryResponse, error)
	ReadHistoryList(ctx context.Context, in *ReadHistoryListRequest, opts ...grpc.CallOption) (*ReadHistoryListResponse, error)
	UpdateHistory(ctx context.Context, in *UpdateHistoryRequest, opts ...grpc.CallOption) (*UpdateHistoryResponse, error)
	DeleteHistory(ctx context.Context, in *DeleteHistoryRequest, opts ...grpc.CallOption) (*DeleteHistoryResponse, error)
	// Group
	CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error)
	ReadGroup(ctx context.Context, in *ReadGroupRequest, opts ...grpc.CallOption) (*ReadGroupResponse, error)
	ReadGroupList(ctx context.Context, in *ReadGroupListRequest, opts ...grpc.CallOption) (*ReadGroupListResponse, error)
	UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*UpdateGroupResponse, error)
	DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*DeleteGroupResponse, error)
}

type mainControlClient struct {
	cc grpc.ClientConnInterface
}

func NewMainControlClient(cc grpc.ClientConnInterface) MainControlClient {
	return &mainControlClient{cc}
}

func (c *mainControlClient) CreateRegisterer(ctx context.Context, in *CreateRegistererRequest, opts ...grpc.CallOption) (*CreateRegistererResponse, error) {
	out := new(CreateRegistererResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/CreateRegisterer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) ReadRegisterer(ctx context.Context, in *ReadRegistererRequest, opts ...grpc.CallOption) (*ReadRegistererResponse, error) {
	out := new(ReadRegistererResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/ReadRegisterer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) ReadRegistererList(ctx context.Context, in *ReadRegistererListRequest, opts ...grpc.CallOption) (*ReadRegistererListResponse, error) {
	out := new(ReadRegistererListResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/ReadRegistererList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) UpdateRegisterer(ctx context.Context, in *UpdateRegistererRequest, opts ...grpc.CallOption) (*UpdateRegistererResponse, error) {
	out := new(UpdateRegistererResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/UpdateRegisterer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) DeleteRegisterer(ctx context.Context, in *DeleteRegistererRequest, opts ...grpc.CallOption) (*DeleteRegistererResponse, error) {
	out := new(DeleteRegistererResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/DeleteRegisterer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) CreatePlace(ctx context.Context, in *CreatePlaceRequest, opts ...grpc.CallOption) (*CreatePlaceResponse, error) {
	out := new(CreatePlaceResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/CreatePlace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) ReadPlace(ctx context.Context, in *ReadPlaceRequest, opts ...grpc.CallOption) (*ReadPlaceResponse, error) {
	out := new(ReadPlaceResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/ReadPlace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) ReadPlaceList(ctx context.Context, in *ReadPlaceListRequest, opts ...grpc.CallOption) (*ReadPlaceListResponse, error) {
	out := new(ReadPlaceListResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/ReadPlaceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) UpdatePlace(ctx context.Context, in *UpdatePlaceRequest, opts ...grpc.CallOption) (*UpdatePlaceResponse, error) {
	out := new(UpdatePlaceResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/UpdatePlace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) DeletePlace(ctx context.Context, in *DeletePlaceRequest, opts ...grpc.CallOption) (*DeletePlaceResponse, error) {
	out := new(DeletePlaceResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/DeletePlace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) CreateSettop(ctx context.Context, in *CreateSettopRequest, opts ...grpc.CallOption) (*CreateSettopResponse, error) {
	out := new(CreateSettopResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/CreateSettop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) ReadSettop(ctx context.Context, in *ReadSettopRequest, opts ...grpc.CallOption) (*ReadSettopResponse, error) {
	out := new(ReadSettopResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/ReadSettop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) ReadSettopList(ctx context.Context, in *ReadSettopListRequest, opts ...grpc.CallOption) (*ReadSettopListResponse, error) {
	out := new(ReadSettopListResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/ReadSettopList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) UpdateSettop(ctx context.Context, in *UpdateSettopRequest, opts ...grpc.CallOption) (*UpdateSettopResponse, error) {
	out := new(UpdateSettopResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/UpdateSettop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) DeleteSettop(ctx context.Context, in *DeleteSettopRequest, opts ...grpc.CallOption) (*DeleteSettopResponse, error) {
	out := new(DeleteSettopResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/DeleteSettop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) CreateSensor(ctx context.Context, in *CreateSensorRequest, opts ...grpc.CallOption) (*CreateSensorResponse, error) {
	out := new(CreateSensorResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/CreateSensor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) ReadSensor(ctx context.Context, in *ReadSensorRequest, opts ...grpc.CallOption) (*ReadSensorResponse, error) {
	out := new(ReadSensorResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/ReadSensor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) ReadSensorList(ctx context.Context, in *ReadSensorListRequest, opts ...grpc.CallOption) (*ReadSensorListResponse, error) {
	out := new(ReadSensorListResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/ReadSensorList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) UpdateSensor(ctx context.Context, in *UpdateSensorRequest, opts ...grpc.CallOption) (*UpdateSensorResponse, error) {
	out := new(UpdateSensorResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/UpdateSensor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) DeleteSensor(ctx context.Context, in *DeleteSensorRequest, opts ...grpc.CallOption) (*DeleteSensorResponse, error) {
	out := new(DeleteSensorResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/DeleteSensor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) CreateHistory(ctx context.Context, in *CreateHistoryRequest, opts ...grpc.CallOption) (*CreateHistoryResponse, error) {
	out := new(CreateHistoryResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/CreateHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) ReadHistory(ctx context.Context, in *ReadHistoryRequest, opts ...grpc.CallOption) (*ReadHistoryResponse, error) {
	out := new(ReadHistoryResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/ReadHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) ReadHistoryList(ctx context.Context, in *ReadHistoryListRequest, opts ...grpc.CallOption) (*ReadHistoryListResponse, error) {
	out := new(ReadHistoryListResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/ReadHistoryList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) UpdateHistory(ctx context.Context, in *UpdateHistoryRequest, opts ...grpc.CallOption) (*UpdateHistoryResponse, error) {
	out := new(UpdateHistoryResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/UpdateHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) DeleteHistory(ctx context.Context, in *DeleteHistoryRequest, opts ...grpc.CallOption) (*DeleteHistoryResponse, error) {
	out := new(DeleteHistoryResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/DeleteHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error) {
	out := new(CreateGroupResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) ReadGroup(ctx context.Context, in *ReadGroupRequest, opts ...grpc.CallOption) (*ReadGroupResponse, error) {
	out := new(ReadGroupResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/ReadGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) ReadGroupList(ctx context.Context, in *ReadGroupListRequest, opts ...grpc.CallOption) (*ReadGroupListResponse, error) {
	out := new(ReadGroupListResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/ReadGroupList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*UpdateGroupResponse, error) {
	out := new(UpdateGroupResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/UpdateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*DeleteGroupResponse, error) {
	out := new(DeleteGroupResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MainControlServer is the server API for MainControl service.
// All implementations must embed UnimplementedMainControlServer
// for forward compatibility
type MainControlServer interface {
	// Registerer
	CreateRegisterer(context.Context, *CreateRegistererRequest) (*CreateRegistererResponse, error)
	ReadRegisterer(context.Context, *ReadRegistererRequest) (*ReadRegistererResponse, error)
	ReadRegistererList(context.Context, *ReadRegistererListRequest) (*ReadRegistererListResponse, error)
	UpdateRegisterer(context.Context, *UpdateRegistererRequest) (*UpdateRegistererResponse, error)
	DeleteRegisterer(context.Context, *DeleteRegistererRequest) (*DeleteRegistererResponse, error)
	// Place
	CreatePlace(context.Context, *CreatePlaceRequest) (*CreatePlaceResponse, error)
	ReadPlace(context.Context, *ReadPlaceRequest) (*ReadPlaceResponse, error)
	ReadPlaceList(context.Context, *ReadPlaceListRequest) (*ReadPlaceListResponse, error)
	UpdatePlace(context.Context, *UpdatePlaceRequest) (*UpdatePlaceResponse, error)
	DeletePlace(context.Context, *DeletePlaceRequest) (*DeletePlaceResponse, error)
	// Settop
	CreateSettop(context.Context, *CreateSettopRequest) (*CreateSettopResponse, error)
	ReadSettop(context.Context, *ReadSettopRequest) (*ReadSettopResponse, error)
	ReadSettopList(context.Context, *ReadSettopListRequest) (*ReadSettopListResponse, error)
	UpdateSettop(context.Context, *UpdateSettopRequest) (*UpdateSettopResponse, error)
	DeleteSettop(context.Context, *DeleteSettopRequest) (*DeleteSettopResponse, error)
	// Sensor
	CreateSensor(context.Context, *CreateSensorRequest) (*CreateSensorResponse, error)
	ReadSensor(context.Context, *ReadSensorRequest) (*ReadSensorResponse, error)
	ReadSensorList(context.Context, *ReadSensorListRequest) (*ReadSensorListResponse, error)
	UpdateSensor(context.Context, *UpdateSensorRequest) (*UpdateSensorResponse, error)
	DeleteSensor(context.Context, *DeleteSensorRequest) (*DeleteSensorResponse, error)
	// History
	CreateHistory(context.Context, *CreateHistoryRequest) (*CreateHistoryResponse, error)
	ReadHistory(context.Context, *ReadHistoryRequest) (*ReadHistoryResponse, error)
	ReadHistoryList(context.Context, *ReadHistoryListRequest) (*ReadHistoryListResponse, error)
	UpdateHistory(context.Context, *UpdateHistoryRequest) (*UpdateHistoryResponse, error)
	DeleteHistory(context.Context, *DeleteHistoryRequest) (*DeleteHistoryResponse, error)
	// Group
	CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupResponse, error)
	ReadGroup(context.Context, *ReadGroupRequest) (*ReadGroupResponse, error)
	ReadGroupList(context.Context, *ReadGroupListRequest) (*ReadGroupListResponse, error)
	UpdateGroup(context.Context, *UpdateGroupRequest) (*UpdateGroupResponse, error)
	DeleteGroup(context.Context, *DeleteGroupRequest) (*DeleteGroupResponse, error)
	mustEmbedUnimplementedMainControlServer()
}

// UnimplementedMainControlServer must be embedded to have forward compatible implementations.
type UnimplementedMainControlServer struct {
}

func (UnimplementedMainControlServer) CreateRegisterer(context.Context, *CreateRegistererRequest) (*CreateRegistererResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRegisterer not implemented")
}
func (UnimplementedMainControlServer) ReadRegisterer(context.Context, *ReadRegistererRequest) (*ReadRegistererResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadRegisterer not implemented")
}
func (UnimplementedMainControlServer) ReadRegistererList(context.Context, *ReadRegistererListRequest) (*ReadRegistererListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadRegistererList not implemented")
}
func (UnimplementedMainControlServer) UpdateRegisterer(context.Context, *UpdateRegistererRequest) (*UpdateRegistererResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRegisterer not implemented")
}
func (UnimplementedMainControlServer) DeleteRegisterer(context.Context, *DeleteRegistererRequest) (*DeleteRegistererResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRegisterer not implemented")
}
func (UnimplementedMainControlServer) CreatePlace(context.Context, *CreatePlaceRequest) (*CreatePlaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlace not implemented")
}
func (UnimplementedMainControlServer) ReadPlace(context.Context, *ReadPlaceRequest) (*ReadPlaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPlace not implemented")
}
func (UnimplementedMainControlServer) ReadPlaceList(context.Context, *ReadPlaceListRequest) (*ReadPlaceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPlaceList not implemented")
}
func (UnimplementedMainControlServer) UpdatePlace(context.Context, *UpdatePlaceRequest) (*UpdatePlaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlace not implemented")
}
func (UnimplementedMainControlServer) DeletePlace(context.Context, *DeletePlaceRequest) (*DeletePlaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlace not implemented")
}
func (UnimplementedMainControlServer) CreateSettop(context.Context, *CreateSettopRequest) (*CreateSettopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSettop not implemented")
}
func (UnimplementedMainControlServer) ReadSettop(context.Context, *ReadSettopRequest) (*ReadSettopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadSettop not implemented")
}
func (UnimplementedMainControlServer) ReadSettopList(context.Context, *ReadSettopListRequest) (*ReadSettopListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadSettopList not implemented")
}
func (UnimplementedMainControlServer) UpdateSettop(context.Context, *UpdateSettopRequest) (*UpdateSettopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSettop not implemented")
}
func (UnimplementedMainControlServer) DeleteSettop(context.Context, *DeleteSettopRequest) (*DeleteSettopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSettop not implemented")
}
func (UnimplementedMainControlServer) CreateSensor(context.Context, *CreateSensorRequest) (*CreateSensorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSensor not implemented")
}
func (UnimplementedMainControlServer) ReadSensor(context.Context, *ReadSensorRequest) (*ReadSensorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadSensor not implemented")
}
func (UnimplementedMainControlServer) ReadSensorList(context.Context, *ReadSensorListRequest) (*ReadSensorListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadSensorList not implemented")
}
func (UnimplementedMainControlServer) UpdateSensor(context.Context, *UpdateSensorRequest) (*UpdateSensorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSensor not implemented")
}
func (UnimplementedMainControlServer) DeleteSensor(context.Context, *DeleteSensorRequest) (*DeleteSensorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSensor not implemented")
}
func (UnimplementedMainControlServer) CreateHistory(context.Context, *CreateHistoryRequest) (*CreateHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHistory not implemented")
}
func (UnimplementedMainControlServer) ReadHistory(context.Context, *ReadHistoryRequest) (*ReadHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadHistory not implemented")
}
func (UnimplementedMainControlServer) ReadHistoryList(context.Context, *ReadHistoryListRequest) (*ReadHistoryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadHistoryList not implemented")
}
func (UnimplementedMainControlServer) UpdateHistory(context.Context, *UpdateHistoryRequest) (*UpdateHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHistory not implemented")
}
func (UnimplementedMainControlServer) DeleteHistory(context.Context, *DeleteHistoryRequest) (*DeleteHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHistory not implemented")
}
func (UnimplementedMainControlServer) CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedMainControlServer) ReadGroup(context.Context, *ReadGroupRequest) (*ReadGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadGroup not implemented")
}
func (UnimplementedMainControlServer) ReadGroupList(context.Context, *ReadGroupListRequest) (*ReadGroupListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadGroupList not implemented")
}
func (UnimplementedMainControlServer) UpdateGroup(context.Context, *UpdateGroupRequest) (*UpdateGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedMainControlServer) DeleteGroup(context.Context, *DeleteGroupRequest) (*DeleteGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedMainControlServer) mustEmbedUnimplementedMainControlServer() {}

// UnsafeMainControlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MainControlServer will
// result in compilation errors.
type UnsafeMainControlServer interface {
	mustEmbedUnimplementedMainControlServer()
}

func RegisterMainControlServer(s grpc.ServiceRegistrar, srv MainControlServer) {
	s.RegisterService(&MainControl_ServiceDesc, srv)
}

func _MainControl_CreateRegisterer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRegistererRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).CreateRegisterer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/CreateRegisterer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).CreateRegisterer(ctx, req.(*CreateRegistererRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_ReadRegisterer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRegistererRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).ReadRegisterer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/ReadRegisterer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).ReadRegisterer(ctx, req.(*ReadRegistererRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_ReadRegistererList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRegistererListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).ReadRegistererList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/ReadRegistererList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).ReadRegistererList(ctx, req.(*ReadRegistererListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_UpdateRegisterer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRegistererRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).UpdateRegisterer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/UpdateRegisterer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).UpdateRegisterer(ctx, req.(*UpdateRegistererRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_DeleteRegisterer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRegistererRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).DeleteRegisterer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/DeleteRegisterer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).DeleteRegisterer(ctx, req.(*DeleteRegistererRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_CreatePlace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).CreatePlace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/CreatePlace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).CreatePlace(ctx, req.(*CreatePlaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_ReadPlace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPlaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).ReadPlace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/ReadPlace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).ReadPlace(ctx, req.(*ReadPlaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_ReadPlaceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPlaceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).ReadPlaceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/ReadPlaceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).ReadPlaceList(ctx, req.(*ReadPlaceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_UpdatePlace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).UpdatePlace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/UpdatePlace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).UpdatePlace(ctx, req.(*UpdatePlaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_DeletePlace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePlaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).DeletePlace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/DeletePlace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).DeletePlace(ctx, req.(*DeletePlaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_CreateSettop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSettopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).CreateSettop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/CreateSettop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).CreateSettop(ctx, req.(*CreateSettopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_ReadSettop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadSettopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).ReadSettop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/ReadSettop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).ReadSettop(ctx, req.(*ReadSettopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_ReadSettopList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadSettopListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).ReadSettopList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/ReadSettopList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).ReadSettopList(ctx, req.(*ReadSettopListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_UpdateSettop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSettopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).UpdateSettop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/UpdateSettop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).UpdateSettop(ctx, req.(*UpdateSettopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_DeleteSettop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSettopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).DeleteSettop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/DeleteSettop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).DeleteSettop(ctx, req.(*DeleteSettopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_CreateSensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSensorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).CreateSensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/CreateSensor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).CreateSensor(ctx, req.(*CreateSensorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_ReadSensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadSensorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).ReadSensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/ReadSensor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).ReadSensor(ctx, req.(*ReadSensorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_ReadSensorList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadSensorListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).ReadSensorList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/ReadSensorList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).ReadSensorList(ctx, req.(*ReadSensorListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_UpdateSensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSensorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).UpdateSensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/UpdateSensor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).UpdateSensor(ctx, req.(*UpdateSensorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_DeleteSensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSensorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).DeleteSensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/DeleteSensor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).DeleteSensor(ctx, req.(*DeleteSensorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_CreateHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).CreateHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/CreateHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).CreateHistory(ctx, req.(*CreateHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_ReadHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).ReadHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/ReadHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).ReadHistory(ctx, req.(*ReadHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_ReadHistoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadHistoryListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).ReadHistoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/ReadHistoryList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).ReadHistoryList(ctx, req.(*ReadHistoryListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_UpdateHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).UpdateHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/UpdateHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).UpdateHistory(ctx, req.(*UpdateHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_DeleteHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).DeleteHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/DeleteHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).DeleteHistory(ctx, req.(*DeleteHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).CreateGroup(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_ReadGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).ReadGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/ReadGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).ReadGroup(ctx, req.(*ReadGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_ReadGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadGroupListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).ReadGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/ReadGroupList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).ReadGroupList(ctx, req.(*ReadGroupListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/UpdateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).UpdateGroup(ctx, req.(*UpdateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).DeleteGroup(ctx, req.(*DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MainControl_ServiceDesc is the grpc.ServiceDesc for MainControl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MainControl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "maincontrol.MainControl",
	HandlerType: (*MainControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRegisterer",
			Handler:    _MainControl_CreateRegisterer_Handler,
		},
		{
			MethodName: "ReadRegisterer",
			Handler:    _MainControl_ReadRegisterer_Handler,
		},
		{
			MethodName: "ReadRegistererList",
			Handler:    _MainControl_ReadRegistererList_Handler,
		},
		{
			MethodName: "UpdateRegisterer",
			Handler:    _MainControl_UpdateRegisterer_Handler,
		},
		{
			MethodName: "DeleteRegisterer",
			Handler:    _MainControl_DeleteRegisterer_Handler,
		},
		{
			MethodName: "CreatePlace",
			Handler:    _MainControl_CreatePlace_Handler,
		},
		{
			MethodName: "ReadPlace",
			Handler:    _MainControl_ReadPlace_Handler,
		},
		{
			MethodName: "ReadPlaceList",
			Handler:    _MainControl_ReadPlaceList_Handler,
		},
		{
			MethodName: "UpdatePlace",
			Handler:    _MainControl_UpdatePlace_Handler,
		},
		{
			MethodName: "DeletePlace",
			Handler:    _MainControl_DeletePlace_Handler,
		},
		{
			MethodName: "CreateSettop",
			Handler:    _MainControl_CreateSettop_Handler,
		},
		{
			MethodName: "ReadSettop",
			Handler:    _MainControl_ReadSettop_Handler,
		},
		{
			MethodName: "ReadSettopList",
			Handler:    _MainControl_ReadSettopList_Handler,
		},
		{
			MethodName: "UpdateSettop",
			Handler:    _MainControl_UpdateSettop_Handler,
		},
		{
			MethodName: "DeleteSettop",
			Handler:    _MainControl_DeleteSettop_Handler,
		},
		{
			MethodName: "CreateSensor",
			Handler:    _MainControl_CreateSensor_Handler,
		},
		{
			MethodName: "ReadSensor",
			Handler:    _MainControl_ReadSensor_Handler,
		},
		{
			MethodName: "ReadSensorList",
			Handler:    _MainControl_ReadSensorList_Handler,
		},
		{
			MethodName: "UpdateSensor",
			Handler:    _MainControl_UpdateSensor_Handler,
		},
		{
			MethodName: "DeleteSensor",
			Handler:    _MainControl_DeleteSensor_Handler,
		},
		{
			MethodName: "CreateHistory",
			Handler:    _MainControl_CreateHistory_Handler,
		},
		{
			MethodName: "ReadHistory",
			Handler:    _MainControl_ReadHistory_Handler,
		},
		{
			MethodName: "ReadHistoryList",
			Handler:    _MainControl_ReadHistoryList_Handler,
		},
		{
			MethodName: "UpdateHistory",
			Handler:    _MainControl_UpdateHistory_Handler,
		},
		{
			MethodName: "DeleteHistory",
			Handler:    _MainControl_DeleteHistory_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _MainControl_CreateGroup_Handler,
		},
		{
			MethodName: "ReadGroup",
			Handler:    _MainControl_ReadGroup_Handler,
		},
		{
			MethodName: "ReadGroupList",
			Handler:    _MainControl_ReadGroupList_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _MainControl_UpdateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _MainControl_DeleteGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "main_control.proto",
}
