// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package maincontrol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MainControlClient is the client API for MainControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MainControlClient interface {
	AddRegisterer(ctx context.Context, in *AddRegistererRequest, opts ...grpc.CallOption) (*AddRegistererResponse, error)
	UpdateRegisterer(ctx context.Context, in *UpdateRegistererRequest, opts ...grpc.CallOption) (*UpdateRegistererResponse, error)
	DeleteRegisterer(ctx context.Context, in *DeleteRegistererRequest, opts ...grpc.CallOption) (*DeleteRegistererResponse, error)
	GetRegisterer(ctx context.Context, in *GetRegistererRequest, opts ...grpc.CallOption) (*GetRegistererResponse, error)
	GetRegistererList(ctx context.Context, in *GetRegistererListRequest, opts ...grpc.CallOption) (*GetRegistererListResponse, error)
	// rpc AddBarn(AddBarnRequest) returns (AddBarnResponse) {}
	// rpc UpdateBarn(UpdateBarnRequest) returns (UpdateBarnResponse) {}
	// rpc DeleteBarn(DeleteBarnRequest) returns (DeleteBarnResponse) {}
	GetBarn(ctx context.Context, in *GetBarnRequest, opts ...grpc.CallOption) (*GetBarnResponse, error)
	GetBarnList(ctx context.Context, in *GetBarnListRequest, opts ...grpc.CallOption) (*GetBarnListResponse, error)
	GetAccessLog(ctx context.Context, in *GetAccessLogRequest, opts ...grpc.CallOption) (*GetAccessLogResponse, error)
	// 사용자가 앱에서 서버에게 OpenGate 요청
	OpenGateFromApp(ctx context.Context, in *OpenGateFromAppRequest, opts ...grpc.CallOption) (*OpenGateFromAppResponse, error)
	// 엣지에서 번호판 인식 후 서버에게 Access 요청
	Access(ctx context.Context, in *AccessRequest, opts ...grpc.CallOption) (*AccessResponse, error)
}

type mainControlClient struct {
	cc grpc.ClientConnInterface
}

func NewMainControlClient(cc grpc.ClientConnInterface) MainControlClient {
	return &mainControlClient{cc}
}

func (c *mainControlClient) AddRegisterer(ctx context.Context, in *AddRegistererRequest, opts ...grpc.CallOption) (*AddRegistererResponse, error) {
	out := new(AddRegistererResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/AddRegisterer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) UpdateRegisterer(ctx context.Context, in *UpdateRegistererRequest, opts ...grpc.CallOption) (*UpdateRegistererResponse, error) {
	out := new(UpdateRegistererResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/UpdateRegisterer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) DeleteRegisterer(ctx context.Context, in *DeleteRegistererRequest, opts ...grpc.CallOption) (*DeleteRegistererResponse, error) {
	out := new(DeleteRegistererResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/DeleteRegisterer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) GetRegisterer(ctx context.Context, in *GetRegistererRequest, opts ...grpc.CallOption) (*GetRegistererResponse, error) {
	out := new(GetRegistererResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/GetRegisterer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) GetRegistererList(ctx context.Context, in *GetRegistererListRequest, opts ...grpc.CallOption) (*GetRegistererListResponse, error) {
	out := new(GetRegistererListResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/GetRegistererList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) GetBarn(ctx context.Context, in *GetBarnRequest, opts ...grpc.CallOption) (*GetBarnResponse, error) {
	out := new(GetBarnResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/GetBarn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) GetBarnList(ctx context.Context, in *GetBarnListRequest, opts ...grpc.CallOption) (*GetBarnListResponse, error) {
	out := new(GetBarnListResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/GetBarnList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) GetAccessLog(ctx context.Context, in *GetAccessLogRequest, opts ...grpc.CallOption) (*GetAccessLogResponse, error) {
	out := new(GetAccessLogResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/GetAccessLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) OpenGateFromApp(ctx context.Context, in *OpenGateFromAppRequest, opts ...grpc.CallOption) (*OpenGateFromAppResponse, error) {
	out := new(OpenGateFromAppResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/OpenGateFromApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainControlClient) Access(ctx context.Context, in *AccessRequest, opts ...grpc.CallOption) (*AccessResponse, error) {
	out := new(AccessResponse)
	err := c.cc.Invoke(ctx, "/maincontrol.MainControl/Access", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MainControlServer is the server API for MainControl service.
// All implementations must embed UnimplementedMainControlServer
// for forward compatibility
type MainControlServer interface {
	AddRegisterer(context.Context, *AddRegistererRequest) (*AddRegistererResponse, error)
	UpdateRegisterer(context.Context, *UpdateRegistererRequest) (*UpdateRegistererResponse, error)
	DeleteRegisterer(context.Context, *DeleteRegistererRequest) (*DeleteRegistererResponse, error)
	GetRegisterer(context.Context, *GetRegistererRequest) (*GetRegistererResponse, error)
	GetRegistererList(context.Context, *GetRegistererListRequest) (*GetRegistererListResponse, error)
	// rpc AddBarn(AddBarnRequest) returns (AddBarnResponse) {}
	// rpc UpdateBarn(UpdateBarnRequest) returns (UpdateBarnResponse) {}
	// rpc DeleteBarn(DeleteBarnRequest) returns (DeleteBarnResponse) {}
	GetBarn(context.Context, *GetBarnRequest) (*GetBarnResponse, error)
	GetBarnList(context.Context, *GetBarnListRequest) (*GetBarnListResponse, error)
	GetAccessLog(context.Context, *GetAccessLogRequest) (*GetAccessLogResponse, error)
	// 사용자가 앱에서 서버에게 OpenGate 요청
	OpenGateFromApp(context.Context, *OpenGateFromAppRequest) (*OpenGateFromAppResponse, error)
	// 엣지에서 번호판 인식 후 서버에게 Access 요청
	Access(context.Context, *AccessRequest) (*AccessResponse, error)
	mustEmbedUnimplementedMainControlServer()
}

// UnimplementedMainControlServer must be embedded to have forward compatible implementations.
type UnimplementedMainControlServer struct {
}

func (UnimplementedMainControlServer) AddRegisterer(context.Context, *AddRegistererRequest) (*AddRegistererResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRegisterer not implemented")
}
func (UnimplementedMainControlServer) UpdateRegisterer(context.Context, *UpdateRegistererRequest) (*UpdateRegistererResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRegisterer not implemented")
}
func (UnimplementedMainControlServer) DeleteRegisterer(context.Context, *DeleteRegistererRequest) (*DeleteRegistererResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRegisterer not implemented")
}
func (UnimplementedMainControlServer) GetRegisterer(context.Context, *GetRegistererRequest) (*GetRegistererResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegisterer not implemented")
}
func (UnimplementedMainControlServer) GetRegistererList(context.Context, *GetRegistererListRequest) (*GetRegistererListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegistererList not implemented")
}
func (UnimplementedMainControlServer) GetBarn(context.Context, *GetBarnRequest) (*GetBarnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBarn not implemented")
}
func (UnimplementedMainControlServer) GetBarnList(context.Context, *GetBarnListRequest) (*GetBarnListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBarnList not implemented")
}
func (UnimplementedMainControlServer) GetAccessLog(context.Context, *GetAccessLogRequest) (*GetAccessLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessLog not implemented")
}
func (UnimplementedMainControlServer) OpenGateFromApp(context.Context, *OpenGateFromAppRequest) (*OpenGateFromAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenGateFromApp not implemented")
}
func (UnimplementedMainControlServer) Access(context.Context, *AccessRequest) (*AccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Access not implemented")
}
func (UnimplementedMainControlServer) mustEmbedUnimplementedMainControlServer() {}

// UnsafeMainControlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MainControlServer will
// result in compilation errors.
type UnsafeMainControlServer interface {
	mustEmbedUnimplementedMainControlServer()
}

func RegisterMainControlServer(s grpc.ServiceRegistrar, srv MainControlServer) {
	s.RegisterService(&MainControl_ServiceDesc, srv)
}

func _MainControl_AddRegisterer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRegistererRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).AddRegisterer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/AddRegisterer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).AddRegisterer(ctx, req.(*AddRegistererRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_UpdateRegisterer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRegistererRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).UpdateRegisterer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/UpdateRegisterer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).UpdateRegisterer(ctx, req.(*UpdateRegistererRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_DeleteRegisterer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRegistererRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).DeleteRegisterer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/DeleteRegisterer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).DeleteRegisterer(ctx, req.(*DeleteRegistererRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_GetRegisterer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegistererRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).GetRegisterer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/GetRegisterer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).GetRegisterer(ctx, req.(*GetRegistererRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_GetRegistererList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegistererListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).GetRegistererList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/GetRegistererList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).GetRegistererList(ctx, req.(*GetRegistererListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_GetBarn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBarnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).GetBarn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/GetBarn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).GetBarn(ctx, req.(*GetBarnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_GetBarnList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBarnListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).GetBarnList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/GetBarnList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).GetBarnList(ctx, req.(*GetBarnListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_GetAccessLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccessLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).GetAccessLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/GetAccessLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).GetAccessLog(ctx, req.(*GetAccessLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_OpenGateFromApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenGateFromAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).OpenGateFromApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/OpenGateFromApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).OpenGateFromApp(ctx, req.(*OpenGateFromAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainControl_Access_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainControlServer).Access(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/maincontrol.MainControl/Access",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainControlServer).Access(ctx, req.(*AccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MainControl_ServiceDesc is the grpc.ServiceDesc for MainControl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MainControl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "maincontrol.MainControl",
	HandlerType: (*MainControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRegisterer",
			Handler:    _MainControl_AddRegisterer_Handler,
		},
		{
			MethodName: "UpdateRegisterer",
			Handler:    _MainControl_UpdateRegisterer_Handler,
		},
		{
			MethodName: "DeleteRegisterer",
			Handler:    _MainControl_DeleteRegisterer_Handler,
		},
		{
			MethodName: "GetRegisterer",
			Handler:    _MainControl_GetRegisterer_Handler,
		},
		{
			MethodName: "GetRegistererList",
			Handler:    _MainControl_GetRegistererList_Handler,
		},
		{
			MethodName: "GetBarn",
			Handler:    _MainControl_GetBarn_Handler,
		},
		{
			MethodName: "GetBarnList",
			Handler:    _MainControl_GetBarnList_Handler,
		},
		{
			MethodName: "GetAccessLog",
			Handler:    _MainControl_GetAccessLog_Handler,
		},
		{
			MethodName: "OpenGateFromApp",
			Handler:    _MainControl_OpenGateFromApp_Handler,
		},
		{
			MethodName: "Access",
			Handler:    _MainControl_Access_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "main_control.proto",
}
